diff -uNr pypy3.6-v7.3.2-src/pypy/module/pwd/interp_pwd.py pypy3.6-v7.3.2-src.mod/pypy/module/pwd/interp_pwd.py
--- pypy3.6-v7.3.2-src/pypy/module/pwd/interp_pwd.py            2020-09-23 15:02:22.000000000 +0800
+++ pypy3.6-v7.3.2-src.mod/pypy/module/pwd/interp_pwd.py        2022-01-09 05:13:04.669185900 +0800
@@ -19,18 +19,25 @@
 uid_t = config['uid_t']
 gid_t = config['gid_t']

-class CConfig:
-    _compilation_info_ = eci
+# Android bionic libc has a different define for passwd.
+# On LP32, it defines pw_gecos to pw_passwd since they're both NULL.
+DEFINED__LP64__ = rffi_platform.getdefined('__LP64__', '')

-    passwd = rffi_platform.Struct(
-        'struct passwd',
-        [('pw_name', rffi.CCHARP),
+fields = [('pw_name', rffi.CCHARP),
          ('pw_passwd', rffi.CCHARP),
          ('pw_uid', uid_t),
          ('pw_gid', gid_t),
          ('pw_gecos', rffi.CCHARP),
          ('pw_dir', rffi.CCHARP),
-         ('pw_shell', rffi.CCHARP)])
+         ('pw_shell', rffi.CCHARP)]
+
+if not DEFINED__LP64__:
+    fields.pop(4)
+
+class CConfig:
+    _compilation_info_ = eci
+
+    passwd = rffi_platform.Struct('struct passwd', fields)

 config = rffi_platform.configure(CConfig)

@@ -42,9 +49,10 @@

 c_getpwuid = external("getpwuid", [uid_t], passwd_p)
 c_getpwnam = external("getpwnam", [rffi.CCHARP], passwd_p)
-c_setpwent = external("setpwent", [], lltype.Void)
-c_getpwent = external("getpwent", [], passwd_p)
-c_endpwent = external("endpwent", [], lltype.Void)
+# Android bionic libc doesn't have these functions until API 26, but termux compiles on API 23/24.
+# c_setpwent = external("setpwent", [], lltype.Void)
+# c_getpwent = external("getpwent", [], passwd_p)
+# c_endpwent = external("endpwent", [], lltype.Void)


 def uid_converter(space, w_uid):
@@ -80,7 +88,7 @@
         space.newtext(rffi.charp2str(pw.c_pw_passwd)),
         space.int(space.newint(pw.c_pw_uid)),
         space.int(space.newint(pw.c_pw_gid)),
-        space.newtext(rffi.charp2str(pw.c_pw_gecos)),
+        space.newtext(rffi.charp2str(pw.c_pw_gecos if DEFINED__LP64__ else pw.c_pw_passwd)),
         space.newtext(rffi.charp2str(pw.c_pw_dir)),
         space.newtext(rffi.charp2str(pw.c_pw_shell)),
         ])
@@ -120,15 +128,15 @@
         raise oefmt(space.w_KeyError, "getpwnam(): name not found: %s", name)
     return make_struct_passwd(space, pw)

-def getpwall(space):
-    users_w = []
-    c_setpwent()
-    try:
-        while True:
-            pw = c_getpwent()
-            if not pw:
-                break
-            users_w.append(make_struct_passwd(space, pw))
-    finally:
-        c_endpwent()
-    return space.newlist(users_w)
+# def getpwall(space):
+#     users_w = []
+#     c_setpwent()
+#     try:
+#         while True:
+#             pw = c_getpwent()
+#             if not pw:
+#                 break
+#             users_w.append(make_struct_passwd(space, pw))
+#     finally:
+#         c_endpwent()
+#     return space.newlist(users_w)
